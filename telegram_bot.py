#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Telegram-–±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.
"""

import logging
import os
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import yaml
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
from claude_api import ClaudeAPIClient

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from queue_formation import QueueManager
from data_processing import OrderProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–æ—Ç–æ–º
WAIT_ORDER_TEXT, WAIT_CONFIRM, WAIT_AI_DESCRIPTION, PROCESSING_AI_REQUEST = range(4)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–æ–∫
COMMAND_NEW_ORDER = 'new_order'
COMMAND_QUEUE = 'view_queue'
COMMAND_STATUS = 'check_status'
COMMAND_HELP = 'help'
COMMAND_EXIT_AI = 'exit_ai'

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, token, chat_ids=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω API Telegram-–±–æ—Ç–∞
            chat_ids (list, optional): –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.token = token
        self.chat_ids = chat_ids or []
        self.application = Application.builder().token(token).build()
        self.bot = self.application.bot
        
    def send_notification(self, message, chat_id=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram.
        
        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id (int, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, 
                                    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –≤ self.chat_ids
        
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            if chat_id:
                self.bot.send_message(chat_id=chat_id, text=message, parse_mode=ParseMode.HTML)
            else:
                for chat in self.chat_ids:
                    self.bot.send_message(chat_id=chat, text=message, parse_mode=ParseMode.HTML)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
            
    def send_order_update(self, order_info, status, chat_id=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
        
        Args:
            order_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            status (str): –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            chat_id (int, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        customer = order_info.get('customer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        order_id = order_info.get('id', 'ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        
        message = f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        message += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {customer}\n"
        message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        
        if 'deadline' in order_info:
            message += f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {order_info['deadline']}\n"
            
        self.send_notification(message, chat_id)
        
    def send_urgency_alert(self, order_info, chat_id=None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–æ—á–Ω–æ–º –∑–∞–∫–∞–∑–µ.
        
        Args:
            order_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            chat_id (int, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        customer = order_info.get('customer', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        order_id = order_info.get('id', 'ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        
        message = f"üö® <b>–°–†–û–ß–ù–´–ô –ó–ê–ö–ê–ó #{order_id}</b> üö®\n\n"
        message += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {customer}\n"
        
        if 'description' in order_info:
            message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order_info['description']}\n"
            
        if 'deadline' in order_info:
            message += f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {order_info['deadline']}\n"
            
        self.send_notification(message, chat_id)


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –ø–µ—á–∞—Ç–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å AI"""
    
    def __init__(self, token, data_processor=None, queue_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram-–±–æ—Ç–∞.
        
        Args:
            token (str): –¢–æ–∫–µ–Ω API Telegram-–±–æ—Ç–∞
            data_processor: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            queue_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏
        """
        self.token = token
        self.data_processor = data_processor
        self.queue_manager = queue_manager
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Claude API –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI
        try:
            self.claude_client = ClaudeAPIClient()
            logger.info("–ö–ª–∏–µ–Ω—Ç Claude API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude API: {str(e)}")
            self.claude_client = None
        
        # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        self.application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_handlers()
        
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∏–º–µ—é—â–∏—Ö –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
        self.admin_ids = []
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å AI
        self.ai_conversations = {}
        
        # –ü—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—á–∞—Ç–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ –¥–ª—è Claude
        self.ai_context = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—á–µ—Ä–µ–¥—å—é –ø–µ—á–∞—Ç–∏. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞–∫–∞–∑–∞—Ö, –æ—á–µ—Ä–µ–¥–∏ –∏ —Ä–∞–±–æ—Ç–µ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏.

–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:
- –¶–≤–µ—Ç–Ω–∞—è –∏ —á–µ—Ä–Ω–æ-–±–µ–ª–∞—è –ø–µ—á–∞—Ç—å
- –ü–µ—á–∞—Ç—å –Ω–∞ –æ–±—ã—á–Ω–æ–π, –º–µ–ª–æ–≤–∞–Ω–Ω–æ–π –∏ –≥–ª—è–Ω—Ü–µ–≤–æ–π –±—É–º–∞–≥–µ
- –ü–µ—á–∞—Ç—å –≤–∏–∑–∏—Ç–æ–∫, –±—É–∫–ª–µ—Ç–æ–≤, –±—Ä–æ—à—é—Ä –∏ –ø–æ—Å—Ç–µ—Ä–æ–≤
- –ü–µ—Ä–µ–ø–ª–µ—Ç –∏ –ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ä–æ–∫–∞—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:
- –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
- –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ (—Å –Ω–∞—Ü–µ–Ω–∫–æ–π 50%)
- –ö—Ä—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã (>1000 –∫–æ–ø–∏–π) –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –æ–±—ã—á–Ω–æ 4-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, —á–µ—Ç–∫–∏–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."""
        
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.cmd_start))
        self.application.add_handler(CommandHandler("help", self.cmd_help))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
        self.application.add_handler(CommandHandler("queue", self.cmd_queue))
        self.application.add_handler(CommandHandler("status", self.cmd_status))
        self.application.add_handler(CommandHandler("drive_test", self.cmd_drive_test))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ ConversationHandler)
        self.application.add_handler(CallbackQueryHandler(
            self.button_callback, 
            pattern=f"^({COMMAND_QUEUE}|{COMMAND_HELP}|{COMMAND_STATUS})$"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("new_order", self.cmd_new_order),
                CallbackQueryHandler(self.cmd_new_order_callback, pattern=f"^{COMMAND_NEW_ORDER}$")
            ],
            states={
                WAIT_ORDER_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_order_text)
                ],
                WAIT_CONFIRM: [
                    CallbackQueryHandler(self.confirm_order_callback, pattern='^confirm$'),
                    CallbackQueryHandler(self.cancel_order_callback, pattern='^cancel$')
                ],
                PROCESSING_AI_REQUEST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.unknown_command)
                ]
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel_order),
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ fallbacks
                CallbackQueryHandler(self.button_callback, pattern=".*")
            ],
            # –í–∞–∂–Ω–æ: —É—Å—Ç–∞–Ω–æ–≤–∏–º allow_reentry=True –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            allow_reentry=True
        )
        self.application.add_handler(order_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(MessageHandler(filters.COMMAND, self.unknown_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT, self.echo))

    async def clean_bot_state(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —É–¥–∞–ª—è—è –≤—Å–µ webhook'–∏ –∏ pending updates.
        –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–∞.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
            bot = self.application.bot
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –æ—á–∏—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            await bot.delete_webhook(drop_pending_updates=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            logger.info("–£—Å–ø–µ—à–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {str(e)}")
            return False
    
    async def pre_run_setup(self, application):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
        await self.clean_bot_state()
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        import asyncio
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop.run_until_complete(asyncio.gather(
                self.application.bot.delete_webhook(drop_pending_updates=True)
            ))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
            self.application.run_polling(drop_pending_updates=True)
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        
    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        return True
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏"), KeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –ø–µ—á–∞—Ç–∏. '
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
            reply_markup=reply_markup
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
        help_text = """
        <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
        
        üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
        ‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        /status ID - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ ID
        """
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏", callback_data=COMMAND_QUEUE)],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            help_text, 
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def cmd_queue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /queue - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏"""
            
        if not self.queue_manager:
            await update.message.reply_text("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
            queue = self.queue_manager.get_current_queue()
            
            if not queue:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=COMMAND_QUEUE)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.", 
                    reply_markup=reply_markup
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
            message = "<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏:</b>\n\n"
            
            for i, order in enumerate(queue, 1):
                order_id = order.get('order_id', order.get('id', 'N/A'))
                message += f"{i}. <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                message += f"   –ö–ª–∏–µ–Ω—Ç: {order.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                message += f"   –°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                if 'deadline' in order:
                    message += f"   –°—Ä–æ–∫: {order['deadline']}\n"
                message += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            keyboard = [
                [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=COMMAND_QUEUE)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status ID - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: /status ID")
            return
            
        order_id = context.args[0]
        
        if not self.queue_manager:
            await update.message.reply_text("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order = self.queue_manager.get_order_by_id(order_id)
            
            if not order:
                await update.message.reply_text(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            message = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order_id}</b>\n\n"
            message += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {order.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            
            if 'description' in order:
                message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order['description']}\n"
                
            if 'deadline' in order:
                message += f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {order['deadline']}\n"
                
            if 'quantity' in order:
                message += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order['quantity']}\n"
                
            await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {str(e)}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    async def cmd_drive_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Google Drive –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        msg = await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ –≤ Google Drive...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if not hasattr(self, 'drive_integration') or not self.drive_integration:
            await msg.edit_text("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Drive –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            results = self.drive_integration.excel_test()
            
            if results["success"]:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                report = "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –≤ Google Drive –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                report += f"üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: `{results.get('local_file', '–ù/–î')}`\n"
                
                if results.get("created_files"):
                    files_str = ", ".join(results["created_files"])
                    report += f"üì§ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: `{files_str}`\n"
                
                if results.get("downloaded_file"):
                    report += f"üì• –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: `{results.get('downloaded_file')}`\n"
                
                if results.get("data_verification"):
                    report += f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {results.get('data_verification')}\n"
                    
                await msg.edit_text(report, parse_mode=ParseMode.MARKDOWN)
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
                error_report = "‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –≤ Google Drive –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏:\n\n"
                
                if results.get("errors"):
                    errors_str = "\n- ".join(results["errors"])
                    error_report += f"–û—à–∏–±–∫–∏:\n- {errors_str}\n\n"
                
                if results.get("created_files"):
                    files_str = ", ".join(results["created_files"])
                    error_report += f"üì§ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: `{files_str}`\n"
                    
                await msg.edit_text(error_report, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–æ–≤: {str(e)}")
            await msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def cmd_new_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ user_data
        context.user_data['state'] = WAIT_ORDER_TEXT
        
        await update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.\n"
            "–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: —Ç–∏–ø –ø–µ—á–∞—Ç–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π, —Ñ–æ—Ä–º–∞—Ç, —Å—Ä–æ–∫ –∏ —Ç.–¥.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        )
        return WAIT_ORDER_TEXT
    
    async def process_order_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        if 'state' not in context.user_data or context.user_data['state'] != WAIT_ORDER_TEXT:
            # –ï—Å–ª–∏ –º—ã –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logger.warning(f"process_order_text –≤—ã–∑–≤–∞–Ω –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {context.user_data.get('state')}")
            return ConversationHandler.END
            
        order_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π
        menu_commands = ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏", "‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "‚ùì –ü–æ–º–æ—â—å", 
                         "–ü–æ–º–æ—â—å", "üëã –ù–∞—á–∞—Ç—å", "–ù–∞—á–∞—Ç—å", "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", 
                         "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏"]
        
        if order_text in menu_commands:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é '{order_text}' –∫–∞–∫ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞")
            await update.message.reply_text(
                "–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return WAIT_ORDER_TEXT
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['order_text'] = order_text
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = update.effective_chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ...")
        
        try:
            if self.data_processor:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM (Claude) –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                order_data = self.data_processor.extract_order_from_text(order_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã
                if not order_data or not isinstance(order_data, dict):
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")
                    await update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
                    )
                    return WAIT_ORDER_TEXT
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['order_data'] = order_data
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ ID —á–∞—Ç–∞
                if not hasattr(self, 'order_data_storage'):
                    self.order_data_storage = {}
                self.order_data_storage[chat_id] = order_data
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                message = "<b>–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n\n"
                message += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data.get('customer', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å')}\n"
                
                if 'contact' in order_data and order_data['contact']:
                    message += f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {order_data['contact']}\n"
                    
                if 'description' in order_data and order_data['description']:
                    message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order_data['description']}\n"
                    
                if 'quantity' in order_data and order_data['quantity']:
                    message += f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {order_data['quantity']}\n"
                    
                if 'deadline' in order_data and order_data['deadline']:
                    message += f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {order_data['deadline']}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await processing_msg.edit_text(
                    message + "\n<b>–í—Å—ë –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:</b>", 
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ WAIT_CONFIRM
                context.user_data['state'] = WAIT_CONFIRM
                return WAIT_CONFIRM
            else:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑: –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
                )
                return ConversationHandler.END
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return ConversationHandler.END
    
    async def confirm_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞)"""
        order_data = context.user_data.get('order_data')
        
        if not order_data:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
            
        try:
            if self.queue_manager:
                # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                status_message = await update.message.reply_text(
                    "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                await status_message.edit_text(
                    "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                    "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Å Google Drive..."
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å
                order_id = self.queue_manager.add_order(order_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                await status_message.edit_text(
                    "‚è≥ –î–æ–±–∞–≤–ª—è—é –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å...\n"
                    "‚úÖ –û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å Google Drive\n"
                    "üîÑ –û–±–Ω–æ–≤–ª—è—é –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –Ω–∞ Google Drive..."
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
                await asyncio.sleep(1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                await status_message.edit_text(
                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n"
                    "‚úÖ –§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Google Drive"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=COMMAND_QUEUE)],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ Google Drive.\n"
                    f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ Google Drive —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è.\n\n"
                    f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END
    
    async def confirm_order_callback(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = query.message.chat_id
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_data = context.user_data.get('order_data')
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if not order_data and hasattr(self, 'order_data_storage') and chat_id in self.order_data_storage:
                order_data = self.order_data_storage[chat_id]
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['order_data'] = order_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            if not order_data:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                await query.edit_message_text(
                    "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=None
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data.clear()
                return ConversationHandler.END
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
            if not self.queue_manager:
                logger.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                await query.edit_message_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑: –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.",
                    reply_markup=None
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data.clear()
                return ConversationHandler.END
                
            # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await query.edit_message_text(
                "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Drive..."
            )
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            
            # –®–∞–≥ 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ—Ä–µ–¥–∏
            await query.edit_message_text(
                "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                "‚úÖ Google Drive –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ..."
            )
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            
            # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞
            await query.edit_message_text(
                "‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                "‚úÖ Google Drive –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚úÖ –§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —Å–∫–∞—á–∞–Ω\n"
                "üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ Excel..."
            )
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å
                order_id = self.queue_manager.add_order(order_data)
                
                # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                await query.edit_message_text(
                    "‚è≥ –î–æ–±–∞–≤–ª—è—é –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å...\n"
                    "‚úÖ Google Drive –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    "‚úÖ –§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —Å–∫–∞—á–∞–Ω\n"
                    "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel\n"
                    "üìù –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å..."
                )
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                
                # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
                await query.edit_message_text(
                    "‚è≥ –î–æ–±–∞–≤–ª—è—é –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å...\n"
                    "‚úÖ Google Drive –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    "‚úÖ –§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —Å–∫–∞—á–∞–Ω\n"
                    "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel\n"
                    "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n"
                    "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å..."
                )
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                
                # –®–∞–≥ 6: –í—ã–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ Google Drive
                await query.edit_message_text(
                    "‚è≥ –ó–∞–≤–µ—Ä—à–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...\n"
                    "‚úÖ Google Drive –¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    "‚úÖ –§–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ —Å–∫–∞—á–∞–Ω\n"
                    "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel\n"
                    "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å\n"
                    "‚úÖ –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ\n"
                    "üì§ –í—ã–≥—Ä—É–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ Google Drive..."
                )
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
                await asyncio.sleep(1)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data=COMMAND_QUEUE)],
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                await query.edit_message_text(
                    f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ Google Drive.\n"
                    f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ Google Drive —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è.\n\n"
                    f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—á–µ—Ä–µ–¥—å—é: {str(e)}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    reply_markup=None
                )
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data.clear()
                return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=None
            )
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END
    
    async def cancel_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞)"""
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /new_order –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'"
        )
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END
        
    async def cancel_order_callback(self, query, context):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏", callback_data=COMMAND_QUEUE)],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    async def echo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        text = update.message.text
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞
        if 'state' in context.user_data:
            state = context.user_data['state']
            if state == WAIT_ORDER_TEXT:
                return await self.process_order_text(update, context)
            elif state == WAIT_AI_DESCRIPTION:
                return await self.process_ai_description(update, context)
            elif state == WAIT_CONFIRM:
                # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å' "
                    "–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."
                )
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏":
            await self.cmd_queue(update, context)
        elif text == "‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑":
            # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['state'] = WAIT_ORDER_TEXT
            await self.cmd_new_order(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await self.cmd_help(update, context)
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {query.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
        callback_data = query.data
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è (–º–∏–≥–∞–Ω–∏–µ —á–∞—Å–∏–∫–æ–≤)
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user_state = context.user_data.get('state')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
        if callback_data == 'confirm' and user_state == WAIT_CONFIRM:
            return await self.confirm_order_callback(query, context)
        elif callback_data == 'cancel' and user_state == WAIT_CONFIRM:
            return await self.cancel_order_callback(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        elif callback_data == COMMAND_NEW_ORDER:
            return await self.cmd_new_order_callback(query, context)
        elif callback_data == COMMAND_QUEUE:
            return await self.cmd_queue_callback(query, context)
        elif callback_data == COMMAND_HELP:
            return await self.cmd_help_callback(query, context)
        elif callback_data == COMMAND_STATUS:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∑–∞–∫–∞–∑–∞
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å:"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –∑–∞–∫–∞–∑–∞
            context.user_data['waiting_for_order_id'] = True
            return
        elif callback_data == COMMAND_EXIT_AI:
            # –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å AI
            if 'ai_mode' in context.user_data:
                del context.user_data['ai_mode']
            
            await query.edit_message_text(
                "–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å AI –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            await self._show_main_menu(query.message.chat_id)
            return
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏: {callback_data}")
            await query.edit_message_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.",
                reply_markup=self._get_main_menu_keyboard()
            )
            return
    
    async def cmd_new_order_callback(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        context.user_data.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞"
        context.user_data['state'] = WAIT_ORDER_TEXT
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑
        await query.edit_message_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑.\n"
            "–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π: —Ç–∏–ø –ø–µ—á–∞—Ç–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π, —Ñ–æ—Ä–º–∞—Ç, —Å—Ä–æ–∫ –∏ —Ç.–¥.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        
        # –í–∞–∂–Ω–æ: –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–¥—ë—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        return WAIT_ORDER_TEXT
    
    async def cmd_help_callback(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = """
        <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
        
        üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
        ‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        /status ID - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ ID
        """
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏", callback_data=COMMAND_QUEUE)],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text, 
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def cmd_queue_callback(self, query, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.queue_manager:
            await query.edit_message_text("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
            queue = self.queue_manager.get_current_queue()
            
            if not queue:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=COMMAND_QUEUE)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.", 
                    reply_markup=reply_markup
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
            message = "<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏:</b>\n\n"
            
            for i, order in enumerate(queue, 1):
                order_id = order.get('order_id', order.get('id', 'N/A'))
                message += f"{i}. <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                message += f"   –ö–ª–∏–µ–Ω—Ç: {order.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                message += f"   –°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                if 'deadline' in order:
                    message += f"   –°—Ä–æ–∫: {order['deadline']}\n"
                message += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            keyboard = [
                [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=COMMAND_NEW_ORDER)],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=COMMAND_QUEUE)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message, 
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude AI
    # –£–¥–∞–ª—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai

    def process_order_description(self, text):
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é Claude API"""
        prompt = f"""–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç:
        {{
            "client": str,
            "phone": str,
            "material": str,
            "date": DD.MM.YY,
            "print_type": str,
            "quantity": int
        }}
        –¢–µ–∫—Å—Ç: {text}"""
        return claude_api.query(prompt)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = "config.yaml"
    with open(config_path, 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    os.makedirs("data", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    queue_manager = QueueManager(config_path)
    data_processor = OrderProcessor(config_path="config.yaml")
    token = os.environ.get("TELEGRAM_BOT_TOKEN") or config.get("telegram", {}).get("token", "")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    bot = TelegramBot(token, data_processor=data_processor, queue_manager=queue_manager)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.start()


if __name__ == "__main__":
    main()
